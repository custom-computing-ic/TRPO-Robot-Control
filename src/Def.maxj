import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix.SignMode;
import com.maxeler.maxcompiler.v2.utils.Bits;

import java.util.List;
import java.util.ArrayList;


class Def {


    ///////////////////////// Parameters /////////////////////////

    // Global Settings
    // NOTE the current Lightweight Simulator does not support arbitrary input layer parallelism - fixed at 4
    public static final int NumLayers      = 4;
    public static final int BufferDepth    = 2;
    public static final char [] AcFunc     = {'l', 't', 't', 'l'};
    public static final int  [] LayerSize  = { 16, 16, 16, 4};
    public static final int  [] NumBlocks  = {  4,  4,  4, 2};
    public static final int ObservSpaceDim = 15;
    public static final int ActionSpaceDim = 3;

    // Lightweight Simulator
    public static final int NumEpisodes = 20;
    public static final int EpisodeLen  = 150;
    public static final int NumSamples  = NumEpisodes * EpisodeLen;
    public static final int NumLightweightSimulators = 5;
    public static final int NumEpisodesPerSimulator = NumEpisodes / NumLightweightSimulators;
    public static final double TimeStepLen = 0.02;

    // pi - for Gaussian Random Number generation
    public static final double pi = 3.1415926535897931;

    // Initial Values: Theta
    public static final double theta_1 = 0;
    public static final double theta_2 = -pi/2.0;
    public static final double theta_3 = pi/2.0;

    // DOF1 - Fixed
    public static final double DOF1_x = 0;
    public static final double DOF1_y = 0;
    public static final double DOF1_z = 0.01768;

    // DOF2
    public static final double DOF2_x = 0;
    public static final double DOF2_y = 0;
    public static final double DOF2_z = 0.07518;

    // Wrist
    public static final double Wrist_x = 0.07375;
    public static final double Wrist_y = 0;
    public static final double Wrist_z = 0.07518;

    // Grip
    public static final double Grip_x  = 0.11315;
    public static final double Grip_y  = 0;
    public static final double Grip_z  = 0.06268;

    // Note: Object is randomly initialised


    ///////////////////////// FPGA Settings /////////////////////////
        
    public static final int KernelFrequencyMAX4 = 200;
    public static final int MaxFanout = 16;
    public static final double PipelineFactorExp     = 0.8;
    public static final double PipelineFactorDiv     = 0.8;
    public static final double PipelineFactorMult    = 1.0;
    public static final double PipelineFactorDefault = 1.0;

    public static final int ForwardKinematicsCalcLatency = 200;


    ///////////////////////// Data Types /////////////////////////

    // Input Type
    public static final DFEType InputType = KernelLib.dfeFloat(11, 53);
    
    // Number of Fractional Bits - affects accuracy
    public static final int FracBits = 23;

    // Fix-Point Data Type for Weight, VWeight, Bias, VBias, Std
    public static final DFEType DataType = KernelLib.dfeFix(4, FracBits, SignMode.TWOSCOMPLEMENT);
    
    // Fix-Point Data Type of y and Ry
    public static final DFEType  yType = KernelLib.dfeFix(4, FracBits, SignMode.TWOSCOMPLEMENT);
    public static final DFEType RyType = KernelLib.dfeFix(9, FracBits, SignMode.TWOSCOMPLEMENT);
    
    // RG, RGW, RGB, ReadBackType
    public static final DFEType RGType  = KernelLib.dfeFix(10, FracBits, SignMode.TWOSCOMPLEMENT);
    public static final DFEType RGWType = KernelLib.dfeFix(20, FracBits, SignMode.TWOSCOMPLEMENT);
    public static final DFEType RGBType = KernelLib.dfeFix(20, FracBits, SignMode.TWOSCOMPLEMENT);
    public static final DFEType ReadBackType = KernelLib.dfeFix(20, FracBits, SignMode.TWOSCOMPLEMENT);
    
    // For Accumulator
    public static final DFEType AccType = KernelLib.dfeFix(20, FracBits, SignMode.TWOSCOMPLEMENT);
    
    // For tanh() Activation Function - current AcExpType supports inputs within (-8, 8)
    public static final DFEType AcInType  = KernelLib.dfeFix(4, FracBits, SignMode.TWOSCOMPLEMENT);
    public static final DFEType AcExpType = KernelLib.dfeFix(8, FracBits, SignMode.UNSIGNED);

    // For Reward Calculation - need a few more fractional bits to avoid cancellation
    public static final DFEType RewardType = KernelLib.dfeFix(6, FracBits, SignMode.TWOSCOMPLEMENT);


    ///////////////////////// Software Utility Functions /////////////////////////

    // Float Input Data Generator
    public static List<Bits> FloatVectorDataGenerator(double [][] data, int numTicks, int VectorWidth) {
        final List<Bits> encodedData = new ArrayList<Bits>(numTicks);
        for (int i=0; i<numTicks; ++i) {
            Bits thisStepBits = InputType.encodeConstant(data[i][0]);
            for (int j=1; j<VectorWidth; ++j){
                thisStepBits = InputType.encodeConstant(data[i][j]).cat(thisStepBits);
            }
            encodedData.add(thisStepBits);
        }
        return encodedData;
    }

}
